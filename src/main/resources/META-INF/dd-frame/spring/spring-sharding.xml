<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
        http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">

    <bean id="prodstockdb" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${prodstockdb.Driver}" />
        <property name="url" value="${prodstockdb.Url}" />
        <property name="username" value="${prodstockdb.Username}" />
        <property name="password" value="${prodstockdb.Password}" />
        <property name="maxActive" value="${prodstockdb.MaxActive}" />
        <property name="maxIdle" value="${prodstockdb.MaxIdle}" />
        <property name="initialSize" value="${prodstockdb.InitialSize}"/>
        <property name="minIdle" value="${prodstockdb.MinIdle}" />
        <property name="maxWait" value="${prodstockdb.MaxWait}" />
    </bean>

    <bean id="prodstockevt" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${prodstockevt.Driver}" />
        <property name="url" value="${prodstockevt.Url}" />
        <property name="username" value="${prodstockevt.Username}" />
        <property name="password" value="${prodstockevt.Password}" />
        <property name="maxActive" value="${prodstockevt.MaxActive}" />
        <property name="maxIdle" value="${prodstockevt.MaxIdle}" />
        <property name="initialSize" value="${prodstockevt.InitialSize}"/>
        <property name="minIdle" value="${prodstockevt.MinIdle}" />
        <property name="maxWait" value="${prodstockevt.MaxWait}" />
    </bean>

    <!-- 配置好dataSourceRulue,即对数据源进行管理 -->
    <bean id="dataSourceRule" class="com.dangdang.ddframe.rdb.sharding.api.rule.DataSourceRule">
        <constructor-arg>
            <map>
                <entry key="prodstockdb" value-ref="prodstockdb"/>
                <entry key="prodstockevt" value-ref="prodstockevt"/>
            </map>
        </constructor-arg>
    </bean>

    <!-- 对sharding表配置，逻辑表名为sharding，实际上分为sharding_0和sharding_1 -->
    <bean id="sharding" class="com.dangdang.ddframe.rdb.sharding.api.rule.TableRule">
        <constructor-arg value="sharding" index="0"/>
        <constructor-arg index="1">
            <list>
                <value>sharding_0</value>
                <value>sharding_1</value>
            </list>
        </constructor-arg>
        <constructor-arg index="2" ref="dataSourceRule"/>
        <constructor-arg index="3" ref="DatabaseShardingStrategy"/>
        <constructor-arg index="4" ref="TableShardingStrategy"/>
    </bean>

    <!-- sharding表分库策略,根据product_id -->
    <bean id="DatabaseShardingStrategy" class="com.dangdang.ddframe.rdb.sharding.api.strategy.database.DatabaseShardingStrategy">
        <constructor-arg index="0" value="product_id"/>
        <constructor-arg index="1">
            <bean class="com.dangdang.shardingRuler.databaseSharding" />
        </constructor-arg>
    </bean>

    <!-- sharding表分表策略,根据warehouse_id -->
    <bean id="TableShardingStrategy" class="com.dangdang.ddframe.rdb.sharding.api.strategy.table.TableShardingStrategy">
        <constructor-arg index="0" value="warehouse_id"/>
        <constructor-arg index="1">
            <bean class="com.dangdang.shardingRuler.tableSharding" />
        </constructor-arg>
    </bean>

    <!-- 构成分库分表的规则 传入数据源集合和每个表的分库分表的具体规则 -->
    <bean id="shardingRule" class="com.dangdang.ddframe.rdb.sharding.api.rule.ShardingRule">
        <constructor-arg index="0" ref="dataSourceRule"/>
        <constructor-arg index="1">
            <list>
                <ref bean="sharding"/>
            </list>
        </constructor-arg>
    </bean>

    <!-- 对datasource进行封装 -->
    <bean id="shardingDataSource" class="com.dangdang.ddframe.rdb.sharding.api.ShardingDataSource">
        <constructor-arg ref="shardingRule"/>
    </bean>

    <!-- 配置sqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="shardingDataSource"/>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.dangdang.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- 事务 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="shardingDataSource" />
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager" />

</beans>